\ProvidesExplPackage{theorem-keys}{}{0.0.0delta}{l3 thmtools implementation}

\RequirePackage{amsthm}
% ^ ams classes have way of ignoring this so don't need to check if they're loaded

%%%%%%%%%%%%%%%%%%%%%%%
%%% Package Options %%%
%%%%%%%%%%%%%%%%%%%%%%%

\DeclareOption{overload}
  {
    \AddToHook{package/theorem-keys/after}
      {
        \RenewDocumentCommand { \newtheorem } { smomo }
          {
            \IfBooleanTF { #1 }
              { \thmkeys_thm_NewThm:nn { #2 } { numbered=no } }
              {
                \IfNoValueTF { #3 }
                  {
                    \IfNoValueTF { #5 }
                      { \thmkeys_thm_NewThm:nn { #2 } { } }
                      { \thmkeys_thm_NewThm:nn { #2 } { parent=#5 } }
                  }
                  { \thmkeys_thm_NewThm:nn { #2 } { sibling=#3 } }
              }
          }
      }
  }

\DeclareOption{thmtools-compat}
  {
    \ProvideDocumentCommand { \declaretheoremstyle } { O{} m }
      { \NewThmStyle { #2 } { #1 } }
    \ProvideDocumentCommand { \declaretheorem } { O{} m }
      { \NewThm { #2 } [ #1 ] }
    \ProvideDocumentEnvironment { restatable } { O{} m m }
      { \begin{#2}[#1,restate=#3] }
      {
        \end{#2}
        \cs_gset_eq:cc { orig_restate_#3 } { #3 }
        \cs_gset:cpn { #3 }
          { % make \foo and \foo* identical
            \peek_meaning_remove:NTF *
              { \use:c { orig_restate_#3 } }
              { \use:c { orig_restate_#3 } }
          }
      }
    \ProvideDocumentCommand { \listoftheorems } { } { \ListOfThms }
  }

\ProcessOptions*

% error if thmtools loaded
\AddToHook{ package/thmtools/before }
  {
    \PackageError{theorem-keys}
      {
        theorem-keys~is~not~compatible~with~thmtools. \MessageBreak
        Try~replacing~\protect\usepackage{thmtools}~with \MessageBreak
        \protect\usepackage[thmtools-compat]{theorem-keys}
      }
      {}
  }

%%%%%%%%%%%%%%%%%%%
%%% Global Keys %%%
%%%%%%%%%%%%%%%%%%%

\seq_new:N \g__thmkeys_restatecounters_seq
\seq_put_right:Nn \g__thmkeys_restatecounters_seq { equation }

\keys_define:nn { thmkeys }
  {
    restate-counters .code:n =
      { \seq_put_right:Nn \g__thmkeys_restatecounters_seq { #1 } },
    continues-code .cs_set:Np = \thmkeys_thmuse_continues:n #1,
    continues-code .initial:n =
      {
        \cs_if_exist:NTF \hyperref
          { \hyperref[#1]{continuing} ~ }
          { continuing ~ }
        from~p.\,\pageref{#1}
      },
  }

\NewDocumentCommand { \ThmKeysSet } { m } { \keys_set:nn { thmkeys } { #1 } }

%%%%%%%%%%%%%%
%%% Styles %%%
%%%%%%%%%%%%%%

% \__thmkeys_thmstyle_setbraces:nn { <left brace> } { <right brace> }
\cs_new_protected:Npn \thmkeys_thmstyle_setbraces:nn #1#2
  {
    \tl_set:Nn \l__thmkeys_thmstyle_lnotebrace_tl {#1}
    \tl_set:Nn \l__thmkeys_thmstyle_rnotebrace_tl {#2}
  }

\keys_define:nn { thmkeys/thmstyle }
  {
    spaceabove    .tl_set:N = \l__thmkeys_thmstyle_spaceabove_tl,
    spacebelow    .tl_set:N = \l__thmkeys_thmstyle_spacebelow_tl,
    bodyfont      .tl_set:N = \l__thmkeys_thmstyle_bodyfont_tl,
    headindent    .tl_set:N = \l__thmkeys_thmstyle_headindent_tl,
    headfont      .tl_set:N = \l__thmkeys_thmstyle_headfont_tl,
    headpunct     .tl_set:N = \l__thmkeys_thmstyle_headpunct_tl,
    postheadspace .tl_set:N = \l__thmkeys_thmstyle_postheadspace_tl,
    break         .meta:n   = { postheadspace = \newline }, % add error if postheadspace set
    break         .value_forbidden:n = true,
    notefont      .tl_set:N = \l__thmkeys_thmstyle_notefont_tl,
    notebraces    .code:n   = \exp_after:wN \thmkeys_thmstyle_setbraces:nn #1,
    headstyle     .choice:,
    headstyle / margin .code:n =
      {
        \cs_set:Nn \thmkeys_thmstyle_headcmd:nnn
          { \exp_not:N \makebox[0pt][r]{\NUMBER\ }\NAME\NOTE }
      },
    headstyle / swapnumber .code:n =
      {
        \cs_set:Nn \thmkeys_thmstyle_headcmd:nnn { \NUMBER\ \NAME\NOTE }
      },
    headstyle / unknown .cs_set:Np = \thmkeys_thmstyle_headcmd:nnn #1#2#3,
    headformat    .meta:n = { headstyle = #1 },
    inherit-style .choice:,
    inherit-style / plain .meta:n = {},
    inherit-style / definition .meta:n = { bodyfont = \normalfont },
    inherit-style / remark .meta:n =
      {
        headfont = \itshape,
        bodyfont = \normalfont,
        spaceabove = 0.5\topsep,
        spacebelow = 0.5\topsep,
      },
  }

\cs_new_protected:Nn \thmkeys_thmstyle_thmname:n { \thmname{#1} }
\cs_new_protected:Nn \thmkeys_thmstyle_thmnumber:n { \thmnumber{#1} }
\cs_new_protected:Nn \thmkeys_thmstyle_thmnote:n { \thmnote{#1} }

% these are necessary!
% e.g. headformat={\thmname{#1}\thmnumber{ #2}\thmnote{ (#3)}} thinks note is always there
\cs_set_eq:NN \ThmName \thmkeys_thmstyle_thmname:n
\cs_set_eq:NN \ThmNumber \thmkeys_thmstyle_thmnumber:n
\cs_set_eq:NN \ThmNote \thmkeys_thmstyle_thmnote:n

%% NOTE: if these are used, user is in charge of spacing with \NAME and \NUMBER
\NewExpandableDocumentCommand { \NAME } { }
  {
    \thmkeys_thmstyle_thmname:n { ##1 }
  }
\NewExpandableDocumentCommand { \NUMBER } { }
  {
    \thmkeys_thmstyle_thmnumber:n { \exp_not:N \textup { ##2 } }
  }
\NewExpandableDocumentCommand { \NOTE } { }
  {
    \thmkeys_thmstyle_thmnote:n
      { ~ \group_begin: % group so notefont doesn't affect headpunct
        \exp_not:V \l__thmkeys_thmstyle_notefont_tl
        \l__thmkeys_thmstyle_lnotebrace_tl ##3 \l__thmkeys_thmstyle_rnotebrace_tl
        \group_end:
      }
  }

\cs_set:Npn \thmkeys_thmstyle_headcmd_default:nnn #1#2#3
  {
    \thmkeys_thmstyle_thmname:n { #1 }
    \thmkeys_thmstyle_thmnumber:n
      { \tl_if_empty:nF{#1}{~} \exp_not:N \textup{#2} }
      % ^ this \tl_if_empty has no effect...
    \thmkeys_thmstyle_thmnote:n
      { ~ \group_begin: % group so notefont doesn't affect headpunct
        \exp_not:V \l__thmkeys_thmstyle_notefont_tl
        \l__thmkeys_thmstyle_lnotebrace_tl #3 \l__thmkeys_thmstyle_rnotebrace_tl
        \group_end:
      }
  }

\tl_new:N \l__thmkeys_thmstyle_defaultkeys_tl
\keys_precompile:nnN { thmkeys/thmstyle }
  {
    spaceabove    = \topsep,
    spacebelow    = \topsep,
    bodyfont      = \itshape,
    headindent    = 0pt,
    headfont      = \bfseries,
    headpunct     = {.},
    postheadspace = 5pt plus 1pt minus 1pt,
    notefont      = \fontseries\mddefault\upshape,
    notebraces    = {(}{)},
    headstyle     = \thmkeys_thmstyle_headcmd_default:nnn{#1}{#2}{#3},
  }
  \l__thmkeys_thmstyle_defaultkeys_tl

\NewDocumentCommand { \NewThmStyle } { m m }
  {
    \tl_use:N \l__thmkeys_thmstyle_defaultkeys_tl
    \keys_set:nn { thmkeys/thmstyle } { #2 }
    \thmkeys_thmstyle_new:nVVVVVVVe { #1 }
      \l__thmkeys_thmstyle_spaceabove_tl
      \l__thmkeys_thmstyle_spacebelow_tl
      \l__thmkeys_thmstyle_bodyfont_tl
      \l__thmkeys_thmstyle_headindent_tl
      \l__thmkeys_thmstyle_headfont_tl
      \l__thmkeys_thmstyle_headpunct_tl
      \l__thmkeys_thmstyle_postheadspace_tl
      { \text_expand:n { \thmkeys_thmstyle_headcmd:nnn{##1}{##2}{##3} } }
    % Define new inherit-style key
    \keys_define:nn { thmkeys/thmstyle } { inherit-style / #1 .meta:n = { #2 } }
    % ^ broken with headformat?
  }

\@onlypreamble\NewThmStyle

\cs_new_eq:NN \thmkeys_thmstyle_new:nnnnnnnnn \newtheoremstyle
\cs_generate_variant:Nn \thmkeys_thmstyle_new:nnnnnnnnn { nVVVVVVVe }

%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Defining Theorems %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\bool_new:N \l__thmkeys_thm_numbered_bool

% \thmkeys_thm_setrefnames:n { <envname> } { <refname> or <sing,plural> }
\NewDocumentCommand { \thmkeys_thm_setrefnames:nn } { m >{\SplitArgument{1}{,}} m }
  { \__thmkeys_thm_setrefnames_aux:nnn{#1}#2 } % not sure why brace around #1 needed
\cs_new_protected:Npn \__thmkeys_thm_setrefnames_aux:nnn #1#2#3
  {
    \cs_set:cpn { #1 autorefname } { #2 }
    \cs_if_exist:NT \crefname 
      { 
        \tl_if_novalue:nTF { #3 }
          { \crefname{#1}{#2}{\textbf{??~(pl.~#2)}} }
          { \crefname{#1}{#2}{#3} }
      }
  }
\cs_generate_variant:Nn \thmkeys_thm_setrefnames:nn { nV }

% \thmkeys_thm_setRefnames:n { <envname> } { <refname> or <sing,plural> }
\NewDocumentCommand { \thmkeys_thm_setRefnames:nn } { m >{\SplitArgument{1}{,}} m }
  { \__thmkeys_thm_setRefnames_aux:nnn{#1}#2 } % not sure why brace around #1 needed
\cs_new_protected:Npn \__thmkeys_thm_setRefnames_aux:nnn #1#2#3
  {
    \cs_set:cpn { #1 Autorefname } { #2 }
    \cs_if_exist:NT \Crefname 
      { 
        \tl_if_novalue:nTF { #3 }
          { \Crefname{#1}{#2}{\textbf{??~(pl.~#2)}} }
          { \Crefname{#1}{#2}{#3} }
      }
  }
\cs_generate_variant:Nn \thmkeys_thm_setRefnames:nn { nV }

\keys_define:nn { thmkeys/thm }
  {
    name           .tl_set:N  = \l__thmkeys_thm_name_tl,
    title          .meta:n    = { name = #1 },
    heading        .meta:n    = { name = #1 },
    numbered       .choice:,
    numbered / true .code:n   = \bool_set_true:N \l__thmkeys_thm_numbered_bool,
    numbered / false .code:n  = \bool_set_false:N \l__thmkeys_thm_numbered_bool,
    numbered / yes .meta:n    = { numbered = true },
    numbered / no  .meta:n    = { numbered = false },
    %numbered / unless-unique .code:n = , % not yet implemented
    %numbered / unless~unique .meta:n = { numbered = unless-unique },
    numbered       .default:n = true,
    parent         .tl_set:N  = \l__thmkeys_thm_parent_tl,
    numberwithin   .meta:n    = { parent = #1 },
    within         .meta:n    = { parent = #1 },
    sibling        .tl_set:N  = \l__thmkeys_thm_sibling_tl,
    numberlike     .meta:n    = { sibling = #1 },
    sharenumber    .meta:n    = { sibling = #1 },
    style          .tl_set:N  = \l__thmkeys_thm_style_tl,
    preheadhook    .tl_set:N  = \l__thmkeys_thm_preheadhook_tl,
    postheadhook   .tl_set:N  = \l__thmkeys_thm_postheadhook_tl,
    prefoothook    .tl_set:N  = \l__thmkeys_thm_prefoothook_tl,
    postfoothook   .tl_set:N  = \l__thmkeys_thm_postfoothook_tl,
    refname        .tl_set:N  = \l__thmkeys_thm_refname_tl,
    Refname        .tl_set:N  = \l__thmkeys_thm_Refname_tl,
    qed            .code:n    = %% Copied from thmtools
      {
        \AddToTheoremPostHeadHook[\l__thmkeys_thm_envname_tl]
          {
            \protected@edef\qedsymbol{#1}
            \pushQED{\qed}
          }
        % Use label to make sure it's last. Might need to adjust to avoid
        % conflict with other chunks added to prefoot hook.
        \AddToHook{theorem-keys/\l__thmkeys_thm_envname_tl/prefoot}[thmkeys_qed]
          {
            \protected@edef\qedsymbol{#1}
            \popQED
          }
       },
    qed            .default:n = \openbox,
    tcolorbox      .code:n    =
      {
        \RequirePackage{tcolorbox}
        \DeclareHookRule{ theorem-keys/\l__thmkeys_thm_envname_tl/prehead }
          { thmkeys_hook_keys }{ before }{ thmkeys_tcb } % is this what we want?
        \AddToHook{ theorem-keys/\l__thmkeys_thm_envname_tl/prehead }[thmkeys_tcb]
          {
            \begin{tcolorbox}[
              savedelimiter = { \l__thmkeys_thmuse_envname_tl },
              wrap@environment,
              #1
              ]
          }
        \DeclareHookRule{ theorem-keys/\l__thmkeys_thm_envname_tl/postfoot }
          { thmkeys_hook_keys }{ after }{ thmkeys_tcb } % is this what we want?
        \AddToHook{ theorem-keys/\l__thmkeys_thm_envname_tl/postfoot }[thmkeys_tcb]
          { \end{tcolorbox} }
      },
    tcolorbox    .default:n = {},
  }

\tl_new:N \l__thmkeys_thm_defaultkeys_tl
\keys_precompile:nnN { thmkeys/thm }
  {
    name         = \q_no_value,
    numbered     = true,
    parent       = {},
    sibling      = {},
    style        = {},
    preheadhook  = {},
    postheadhook = {},
    prefoothook  = {},
    postfoothook = {},
    refname      = \q_no_value,
    Refname      = \q_no_value,
  }
  \l__thmkeys_thm_defaultkeys_tl

\cs_new_protected:Npn \__thmkeys_thm_makethmhooks:n #1
  {
    \NewHook{ theorem-keys/#1/prehead}
    \NewHook{ theorem-keys/#1/posthead }
    \NewReversedHook{ theorem-keys/#1/prefoot }
    \NewReversedHook{ theorem-keys/#1/postfoot }
  }

\prop_new:N \g__thmkeys_thmnames_prop % for retrieving name from envname

% Make generic theorem hooks
\__thmkeys_thm_makethmhooks:n { allthms }

%% Inefficiences: don't need to store and reset style every time.
%% I do, however, need to set/reset keys each time so that envname is correct.
\NewDocumentCommand { \NewThm } { m O{} }
  {
    \clist_map_inline:nn { #1 } % define multiple theorems at once
      { \thmkeys_thm_NewThm:nn { ##1 } { #2 } }
  }

\@onlypreamble\NewThm

% \thmkeys_thm_NewThm:nn { <envname> } { <keys> }
\cs_new_protected:Npn \thmkeys_thm_NewThm:nn #1#2
  {
    % Store theorem style
    \tl_set:Ne \l__thmkeys_currentthmstyle_tl { \the\thm@style }
    % Store envname
    \tl_set:Nn \l__thmkeys_thm_envname_tl { #1 }
    % Set default keys
    \tl_use:N \l__thmkeys_thm_defaultkeys_tl
    % Set env-specific keys
    \keys_set:nn { thmkeys/thm } { #2 }
    % Temporarily set style if style key given
    \tl_if_empty:NF \l__thmkeys_thm_style_tl
      { \__thmkeys_theoremstyle:n { \l__thmkeys_thm_style_tl } }
    % Set up env-specific hooks
    \__thmkeys_thm_makethmhooks:n { #1 }
    % Add to env-specific hooks (use label so code given in keys is outermost)
    \hook_gput_code:nnV { theorem-keys/#1/prehead }
      { thmkeys_hook_keys } \l__thmkeys_thm_preheadhook_tl
    \hook_gput_code:nnV { theorem-keys/#1/posthead }
      { thmkeys_hook_keys } \l__thmkeys_thm_postheadhook_tl
    \hook_gput_code:nnV { theorem-keys/#1/prefoot }
      { thmkeys_hook_keys } \l__thmkeys_thm_prefoothook_tl
    \hook_gput_code:nnV { theorem-keys/#1/postfoot }
      { thmkeys_hook_keys } \l__thmkeys_thm_postfoothook_tl
    % Set name if none given
    \quark_if_no_value:NT \l__thmkeys_thm_name_tl % use quark so name={} is valid
      {
        \tl_set:Ne \l__thmkeys_thm_name_tl
          { \text_titlecase_first:n { \l__thmkeys_thm_envname_tl } }
      }
    % associate formatted name with envname in prop list
    \prop_gput:NnV \g__thmkeys_thmnames_prop { #1 } \l__thmkeys_thm_name_tl
    % Call correct \newtheorem variant
    \bool_if:NTF \l__thmkeys_thm_numbered_bool
      {
        \tl_if_empty:NTF \l__thmkeys_thm_parent_tl
          {
            \tl_if_empty:NTF \l__thmkeys_thm_sibling_tl
              { \__thmkeys_thm_new:nV { #1 } \l__thmkeys_thm_name_tl }
              {
                %% NOTE: need this unconditionally for \PrintThms
                \RequirePackage{aliascnt}
                \exp_args:NVV \newaliascnt
                  \l__thmkeys_thm_envname_tl \l__thmkeys_thm_sibling_tl
                \__thmkeys_thm_new_sibling:nVV { #1 }
                  \l__thmkeys_thm_name_tl \l__thmkeys_thm_envname_tl
                \exp_args:NV \aliascntresetthe \l__thmkeys_thm_envname_tl
              }
          }
          {
            \__thmkeys_thm_new_parent:nVV { #1 }
              \l__thmkeys_thm_name_tl \l__thmkeys_thm_parent_tl
          }
      }
      {
        \__thmkeys_thm_new_nonumber:nV { #1 } \l__thmkeys_thm_name_tl
      }
    % Store theorem def so we can redefine it with keys
    \thmkeys_keyify_theorem:n { #1 }
    % define \<env>autorefname and \<env>Autorefname, might be redefined next
    \tl_set:cV { #1 autorefname } \l__thmkeys_thm_name_tl
    \tl_set:cV { #1 Autorefname } \l__thmkeys_thm_name_tl
    % Set ref names
    \quark_if_no_value:NF \l__thmkeys_thm_refname_tl
      { \thmkeys_thm_setrefnames:nV { #1 } \l__thmkeys_thm_refname_tl }
    \quark_if_no_value:NF \l__thmkeys_thm_Refname_tl 
      { \thmkeys_thm_setRefnames:nV { #1 } \l__thmkeys_thm_Refname_tl }
    % Set default list-of display command
    \__thmkeys_listof_show_aux:n { #1 }
    % Set theorem style back to original state
    \__thmkeys_theoremstyle:V \l__thmkeys_currentthmstyle_tl
  }

\cs_generate_variant:Nn \hook_gput_code:nnn { nnV }

\cs_new_eq:NN \__thmkeys_theoremstyle:n \theoremstyle
\cs_generate_variant:Nn \__thmkeys_theoremstyle:n { V }

% \newtheorem variants
\cs_new_eq:NN \__thmkeys_thm_new:nn \newtheorem
\cs_generate_variant:Nn \__thmkeys_thm_new:nn { nV }

\cs_new_protected:Npn \__thmkeys_thm_new_nonumber:nn #1#2
  { \__thmkeys_thm_new:nn*{#1}{#2} }
\cs_generate_variant:Nn \__thmkeys_thm_new_nonumber:nn { nV }

\cs_new_protected:Npn \__thmkeys_thm_new_parent:nnn #1#2#3
  { \__thmkeys_thm_new:nn{#1}{#2}[#3] }
\cs_generate_variant:Nn \__thmkeys_thm_new_parent:nnn { nVV }

\cs_new_protected:Npn \__thmkeys_thm_new_sibling:nnn #1#2#3
  { \__thmkeys_thm_new:nn{#1}[#3]{#2} }
\cs_generate_variant:Nn \__thmkeys_thm_new_sibling:nnn { nVV }

\keys_define:nn { thmkeys/thmuse }
  {
    label     .code:n   =
      { \AddToHookNext{ cmd/deferred@thm@head/after }{ \label{ #1 } } },
    % ^ maybe better to add to usual posthead hook and declare a rule
    note      .tl_set:N = \l__thmkeys_thmuse_note_tl,
    name      .tl_set:N = \l__thmkeys_thmuse_note_tl,
    % ^ for compatibility. "name" is ambiguous and doesn't match amsthm language
    continues .tl_set:N = \l__thmkeys_thmuse_contlabel_tl,
    restate   .tl_set:N = \l__thmkeys_thmuse_restate_tl,
  }

%% Adapted from https://tex.stackexchange.com/a/481221/208544
% allocate the needed variables
\prop_new:N \g__thmkeys_thmuse_othercounters_prop
\seq_new:N \g__thmkeys_thmuse_seq

% \thmkeys_keyify_theorem:n { <envname> }
%% NOTE: should only grab body for restatable... but how? Actually might be ok efficiency-wise
\cs_new_protected:Npn \thmkeys_keyify_theorem:n #1
  {
    \NewEnvironmentCopy { thmkeys_orig_#1 } { #1 }
    \bool_if:NTF \l__thmkeys_thm_numbered_bool
      { % numbered
        \RenewDocumentEnvironment { #1 } { ={name} O{} +b }
          {
            \keys_set:nn { thmkeys/thmuse } { ##1 }
            \thmkeys_thmuse_prebody:n { #1 }
            \seq_map_inline:Nn \g__thmkeys_restatecounters_seq
              {
                \prop_gput:Nne \g__thmkeys_thmuse_othercounters_prop
                  { ####1 } { \the\value{####1} }
              }
            \seq_gput_right:Nx \g__thmkeys_thmuse_seq
              {
                { #1 } % envname
                { \@currentlabel } % number
                { \exp_not:n { ##1 } } % keys
                { \exp_not:n { ##2 } } % body
                { \prop_to_keyval:N \g__thmkeys_thmuse_othercounters_prop }
                { \thepage } % page number
                { \cs_if_exist:NT \@currentHref { \@currentHref } } % for hyperref
                % ^ is this necessary? Should always be of form <envname>.\the<envname>
              }
            ##2
            \thmkeys_thmuse_postbody:n { #1 }
            \tl_if_empty:NF \l__thmkeys_thmuse_restate_tl
              {
                \seq_get_right:NN \g__thmkeys_thmuse_seq
                  \l__thmkeys_thmuse_savethmargs_tl
                \exp_args:Nee \cs_new:cpn { \l__thmkeys_thmuse_restate_tl } % a better way?
                  {
                    \exp_not:N \ThmKeysSavedTheorem
                    \exp_not:V \l__thmkeys_thmuse_savethmargs_tl
                  }
              }
          }
          {}
     }
     { % unnumbered
       \RenewDocumentEnvironment { #1 } { ={name} O{} +b }
         {
           \keys_set:nn { thmkeys/thmuse } { ##1 }
           \thmkeys_thmuse_prebody:n { #1 }
           \seq_map_inline:Nn \g__thmkeys_restatecounters_seq
             { \prop_gput:Nne \g__thmkeys_thmuse_othercounters_prop { ####1 } { \the\value{####1} } }
           \seq_gput_right:Nx \g__thmkeys_thmuse_seq
             {
               { #1 } % envname
               { } % number
               { \exp_not:n { ##1 } } % keys
               { \exp_not:n { ##2 } } % body
               { \prop_to_keyval:N \g__thmkeys_thmuse_othercounters_prop }
               { \thepage } % page number
               { } % FIX: use dummy counter for hyperref
             }
           ##2
           \thmkeys_thmuse_postbody:n { #1 }
           \tl_if_empty:NF \l__thmkeys_thmuse_restate_tl
             {
               \seq_get_right:NN \g__thmkeys_thmuse_seq
                 \l__thmkeys_thmuse_savethmargs_tl
               \exp_args:Nee \cs_gset:cpn { \l__thmkeys_thmuse_restate_tl } % a better way?
                 {
                   \exp_not:N \ThmKeysSavedTheorem
                   \exp_not:V \l__thmkeys_thmuse_savethmargs_tl
                 }
             }
         }
         {}
     }
  }

\cs_new:Npn \__thmkeys_ref_starred:n #1 { \ref*{#1} }

\cs_new_protected:Npn \thmkeys_thmuse_prebody:n #1
  {
    %%% EXPERIMENTAL
    \tl_set:Nn \l__thmkeys_thmuse_envname_tl { #1 }
    %%% END EXPERIMENTAL
    \UseHook{ theorem-keys/#1/prehead }
    \UseHook{ theorem-keys/allthms/prehead }
    \tl_if_empty:NF \l__thmkeys_thmuse_contlabel_tl
      {
        \tl_if_empty:NF \l__thmkeys_thmuse_note_tl
          { \tl_put_right:Nn \l__thmkeys_thmuse_note_tl { , ~ } }
        \tl_put_right:Nn \l__thmkeys_thmuse_note_tl
          { \thmkeys_thmuse_continues:V \l__thmkeys_thmuse_contlabel_tl }
        \cs_set:cpn { the #1 }
          { \exp_args:Ne \__thmkeys_ref_starred:n { \l__thmkeys_thmuse_contlabel_tl } }
          % ^ apparently V expansion is not enough, error if label= is given too
        \cs_set_eq:cN { c@ #1 } \c@thmkeys_dummyctr
      }
    \tl_if_empty:NTF \l__thmkeys_thmuse_note_tl
      { \__thmkeys_orig_begin:n { #1 } }
      { \__thmkeys_orig_begin:nV { #1 } \l__thmkeys_thmuse_note_tl }
    \UseHook{ theorem-keys/#1/posthead }
    \UseHook{ theorem-keys/allthms/posthead }
    %\ignorespaces % space added without this (or not? check)
  }

\cs_new_protected:Npn \thmkeys_thmuse_postbody:n #1
  {
    \UseHook{ theorem-keys/allthms/prefoot }
    \UseHook{ theorem-keys/#1/prefoot }
    \end{thmkeys_orig_#1}
    \UseHook{ theorem-keys/allthms/postfoot }
    \UseHook{ theorem-keys/#1/postfoot }
  }

\cs_new_protected:Npn \__thmkeys_orig_begin:n #1 { \begin{thmkeys_orig_#1} }
\cs_new_protected:Npn \__thmkeys_orig_begin:nn #1#2 { \begin{thmkeys_orig_#1}[#2] }
\cs_generate_variant:Nn \__thmkeys_orig_begin:nn { nV }

\cs_generate_variant:Nn \thmkeys_thmuse_continues:n { V }

%%%%%%%%%%%%%%%%%%%%%
%%% Theorem Hooks %%%
%%%%%%%%%%%%%%%%%%%%%

%%% \AddToTheorem<hook>Hook[<envname>]{<code>}
\NewDocumentCommand { \AddToTheoremPreHeadHook } { o m }
  {
    \IfNoValueTF { #1 }
      { \AddToHook{ theorem-keys/allthms/prehead }{ #2 } }
      { \AddToHook{ theorem-keys/#1/prehead }{ #2 } }
  }
\NewDocumentCommand { \AddToTheoremPostHeadHook } { o m }
  {
    \IfNoValueTF { #1 }
      { \AddToHook{ theorem-keys/allthms/posthead }{ #2 } }
      { \AddToHook{ theorem-keys/#1/posthead }{ #2 } }
  }
\NewDocumentCommand { \AddToTheoremPreFootHook } { o m }
  {
    \IfNoValueTF { #1 }
      { \AddToHook{ theorem-keys/allthms/prefoot }{ #2 } }
      { \AddToHook{ theorem-keys/#1/prefoot }{ #2 } }
  }
\NewDocumentCommand { \AddToTheoremPostFootHook } { o m }
  {
    \IfNoValueTF { #1 }
      { \AddToHook{ theorem-keys/allthms/postfoot }{ #2 } }
      { \AddToHook{ theorem-keys/#1/postfoot }{ #2 } }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Restating Theorems %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

% print the stored theorems
% NOTE: If you want to print theorems before they're called in the document,
%       we need to write to file. See code in 0.0.0alpha.
% LATER NOTE: Why would you want to print theorem with body before it's called?
% LATER LATER NOTE: this functionality has been wrapped into \ListOfThms
%\NewDocumentCommand { \PrintThms } { }
%  {
%    \seq_map_inline:Nn \g__thmkeys_thmuse_seq { \ThmKeysSavedTheorem ##1 }
%  }

% stealing from thm-restate
\newcounter{thmkeys_dummyctr}
\cs_gset:Npn \theHthmkeys_dummyctr { dummy.\arabic{thmkeys_dummyctr} }
\cs_gset:Npn \thethmkeys_dummyctr { }

\NewDocumentCommand { \ThmKeysSavedTheorem } { m m m +m m m m } % 4th arg is body
  {
    \prop_set_from_keyval:Nn \g__thmkeys_thmuse_othercounters_prop { #5 }
    \group_begin:
    \prop_map_inline:Nn \g__thmkeys_thmuse_othercounters_prop
      {
        \tl_gset:ce { l_thmkeys_restate_current_##1_tl } { \the\value{##1} }
        \setcounter { ##1 } { ##2 } % FIX: what if eq's numbered by section, theorem, etc.?
        \cs_set_eq:cN { theH ##1 } \theHthmkeys_dummyctr
      }
    \tl_if_empty:nF { #2 }
      {
        \cs_set:cpn { the #1 } { #2 }
        \cs_set_eq:cN { c@ #1 } \c@thmkeys_dummyctr
        \cs_set_eq:cN { theH #1 } \theHthmkeys_dummyctr
      }
    \cs_set_eq:NN \label \use_none:n % disable \label
    \keys_set:nn { thmkeys/thmuse } { #3 }
    \thmkeys_thmuse_prebody:n { #1 }
    #4
    \thmkeys_thmuse_postbody:n { #1 }
    \group_end:
    \prop_map_inline:Nn \g__thmkeys_thmuse_othercounters_prop
      {
        \exp_args:Nnc \setcounter { ##1 } { l_thmkeys_restate_current_##1_tl }
      }
  }

%%%%%%%%%%%%%%%%%%%%%%%%
%%% List of Theorems %%%
%%%%%%%%%%%%%%%%%%%%%%%%

\keys_define:nn { thmkeys/listof }
  {
    numwidth   .dim_set:N = \l__thmkeys_listof_numwidth_dim,
    numwidth   .initial:n = 2.3em,
    ignore     .code:n    =
      {
        \AddToHook{ begindocument/before } { \thmkeys_listof_ignore:n { #1 } }
      },
    show       .code:n    =
      {
        \AddToHook{ begindocument/before } { \thmkeys_listof_show:n { #1 } }
      },
    onlynamed  .code:n    =
      {
        \AddToHook{ begindocument/before } { \thmkeys_listof_onlynamed:n { #1 } }
      },
    onlynamed .default:n  = \q_no_value,
    ignoreall  .code:n    =
      {
        \AddToHook{ begindocument/before } % in case called before theorem defined
          {
            \prop_map_inline:Nn \g__thmkeys_thmnames_prop
              { \__thmkeys_listof_ignore_aux:n { ##1 } }
          }
      },
    showall    .code:n    =
      {
        \AddToHook{ begindocument/before } % in case called before theorem defined
          {
            \prop_map_inline:Nn \g__thmkeys_thmnames_prop
              { \__thmkeys_listof_show_aux:n { ##1 } }
          }
      },
    title      .tl_set:N   = \l__thmkeys_listof_title_tl,
    title      .initial:n  = { List~of~Theorems },
    swapnumber .bool_set:N = \l__thmkeys_listof_swapnumber_bool,
    swapnumber .initial:n  = false,
    title-code .cs_set:Np  = \__thmkeys_listof_titlecmd:n #1,
    no-title   .meta:n     = { title-code = {} },
    print-body .code:n     =
      { \cs_set_eq:NN \__thmkeys_listof_default_listcmd:nnnnnnn \ThmKeysSavedTheorem },
  }

\AddToHook{ begindocument } % redefine these keys after begindocument
  {
    \keys_define:nn { thmkeys/listof }
      {
        ignore    .code:n    = \thmkeys_listof_ignore:n { #1 },
        show      .code:n    = \thmkeys_listof_show:n { #1 },
        onlynamed .code:n    = \thmkeys_listof_onlynamed:n { #1 },
        onlynamed .default:n = \q_no_value,
        ignoreall .code:n    =
          {
            \prop_map_inline:Nn \g__thmkeys_thmnames_prop
              { \__thmkeys_listof_ignore_aux:n { ##1 } }
          },
        showall   .code:n    =
          {
            \prop_map_inline:Nn \g__thmkeys_thmnames_prop
              { \__thmkeys_listof_show_aux:n { ##1 } }
          },
      }
  }

\NewDocumentCommand { \ThmKeysListSet } { m } % find better name...
  { \keys_set:nn { thmkeys/listof } { #1 } }

\cs_new_protected:Npn \thmkeys_listof_ignore:n #1
  {
    \clist_map_inline:nn { #1 } { \__thmkeys_listof_ignore_aux:n { ##1 } }
  }
\cs_new_protected:Npn \__thmkeys_listof_ignore_aux:n #1
  {
    \cs_set_protected:cpn { __thmkeys_thmitem_#1:nnnnnnn } ##1##2##3##4##5##6##7 { }
  }

\cs_new_protected:Npn \thmkeys_listof_show:n #1
  {
    \clist_map_inline:nn { #1 } { \__thmkeys_listof_show_aux:n { ##1 } }
  }
\cs_new_protected:Npn \__thmkeys_listof_show_aux:n #1
  {
    \cs_set_protected:cpn { __thmkeys_thmitem_#1:nnnnnnn } ##1##2##3##4##5##6##7
      {
        \__thmkeys_listof_listcmd_setup:nn { ##3 }
          {
            \__thmkeys_listof_default_listcmd:nnnnnnn
              {##1}{##2}{##3}{##4}{##5}{##6}{##7}
          }
      }
  }

\cs_new_protected:Npn \thmkeys_listof_onlynamed:n #1 
  {
    \quark_if_no_value:nTF { #1 }
      {
        \prop_map_inline:Nn \g__thmkeys_thmnames_prop
          { \__thmkeys_listof_onlynamed_aux:n { ##1 } }
      }
      {
        \clist_map_inline:nn { #1 }
          { \__thmkeys_listof_onlynamed_aux:n { ##1 } }
      }
  }
\cs_new_protected:Npn \__thmkeys_listof_onlynamed_aux:n #1 
  {
    \cs_set_protected:cpn { __thmkeys_thmitem_#1:nnnnnnn } ##1##2##3##4##5##6##7
      {
        \__thmkeys_listof_listcmd_setup:nn { ##3 }
          {
            \tl_if_empty:NF \l__thmkeys_listofheading_name_tl
              {
                \__thmkeys_listof_default_listcmd:nnnnnnn
                  {##1}{##2}{##3}{##4}{##5}{##6}{##7}
              }
          }
      }
  }

% Seems unnecessary to repeat all this for reading the keyvals from seq.
% In thmtools they just hook the "thmitem" definition into the theorem declaration.
%% NOTE ON ABOVE: this gives more flexibility to define different kinds of lists.
%% See acro.sty for template idea.
\keys_define:nn { thmkeys/listofheading }
  {
    name .tl_set:N = \l__thmkeys_listofheading_name_tl,
    label .code:n = , % do nothing
    continues .tl_set:N = \l__thmkeys_listofheading_contlabel_tl,
    restate .code:n = , % do nothing
  }

\cs_new:Npn \__thmkeys_listof_printheading:
  {
    \tl_if_empty:NF \l__thmkeys_listofheading_name_tl
      { ~ ( \l__thmkeys_listofheading_name_tl ) }
  }

\cs_new:Npn \__thmkeys_listof_default_listcmd:nnnnnnn #1#2#3#4#5#6#7
  {
    \contentsline{ #1 }
      {
        \bool_if:NTF \l__thmkeys_listof_swapnumber_bool
          { \prop_item:Nn \g__thmkeys_thmnames_prop { #1 } ~ #2 }
          {
            \numberline{ #2 }
            \prop_item:Nn \g__thmkeys_thmnames_prop { #1 }
          }
        \__thmkeys_listof_printheading:
      }
      { #6 }{ #7 }
  }

\cs_new:Npn \__thmkeys_listof_listcmd_setup:nn #1#2
  {
    \group_begin:
    \keys_set:nn { thmkeys/listofheading } { #1 }
    \tl_if_empty:NF \l__thmkeys_listofheading_contlabel_tl
      {
        \tl_if_empty:NF \l__thmkeys_listofheading_name_tl
          { \tl_put_right:Nn \l__thmkeys_listofheading_name_tl { , ~ } }
        \tl_put_right:Nn \l__thmkeys_listofheading_name_tl
          { \thmkeys_thmuse_continues:V \l__thmkeys_listofheading_contlabel_tl }
      }
    #2
    \group_end:
  }

\AtBeginDocument
  {
    \cs_if_exist:NTF \@tocline
      {
        \prop_map_inline:Nn \g__thmkeys_thmnames_prop
          {
            \cs_set:cpn { l@ #1 }
              {
                \@tocline{ 0 }{ 3pt plus 2pt }{ 0pt }
                  { \l__thmkeys_listof_numwidth_dim }{ }
              }
          }
      }
      {
        \prop_map_inline:Nn \g__thmkeys_thmnames_prop
          {
            \cs_set:cpn { l@ #1 }
              {
                \@dottedtocline{ 1 }{ 1.5em }
                  { \l__thmkeys_listof_numwidth_dim }
              }
          }
      }
  }

\cs_if_exist:NTF \chapter
  { \cs_set:Npn \__thmkeys_listof_titlecmd:n #1 { \chapter*{#1} } }
  { \cs_set:Npn \__thmkeys_listof_titlecmd:n #1 { \section*{#1} } }

\NewDocumentCommand { \ListOfThms } { O{} }
  {
    \group_begin:
    \keys_set:nn { thmkeys/listof } { #1 }
    \__thmkeys_listof_titlecmd:n { \l__thmkeys_listof_title_tl }
    \seq_map_inline:Nn \g__thmkeys_thmuse_seq
      {
        %\tl_set:Nn \l__thmkeys_tmpa_tl { \use_i:nnnnnnn ##1 }
        \use:c { __thmkeys_thmitem_ \use_i:nnnnnnn ##1 :nnnnnnn } ##1
      }
    \group_end:
  }

%%% Questions
% 1. Are kernel hooks really better than simple token lists?
%    In particular, with token lists you have \tl_put_left to avoid all the hook
%    order issues
% 2. Should we allow \NewThm keys in \NewThmStyle like thmtools?
% 3. \ListOfThms does not print restated theorems. Should an option be added
%    to do this?
% 4. Instead of using aux we store everything in this big sequence and retrieve
%    data from that. Is that a good idea?

%%% Keys not yet implemented
% qed (in style; and all thm keys in style)
% numbered=unless unique

%%% Commands/envs not implemented
% \Autoref